{
	"React Component - Class with imports": {
		"prefix": "ccomp",
		"body": [
			"import React, { Component } from 'react';",
			"",
			"export interface I${1:App}Props {",
			"}",
			"",
			"export interface I${1:App}State {",
			"}",
			"",
			"export default class ${1:} extends Component<I${1:}Props, I${1:}State> {",
			"  constructor(props: I${1:}Props) {",
			"    super(props);",
			"",
			"    this.state = {",
			"    }",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    );",
			"  }",
			"}",
			""
		],
		"description": "Create a stateful React Component with typescript with Props, State, and a constructor."
	},
	"React Component - Class without imports": {
		"prefix": "ccompnoimports",
		"body": [
			"export interface I${1:App}Props {",
			"}",
			"",
			"export interface I${1:App}State {",
			"}",
			"",
			"export default class ${1:} extends Component<I${1:}Props, I${1:}State> {",
			"  constructor(props: I${1:}Props) {",
			"    super(props);",
			"",
			"    this.state = {",
			"    }",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    );",
			"  }",
			"}",
			""
		],
		"description": "Create a stateful React Component with typescript with Props, State, and a constructor (without imports)."
	},
	"React Functional Component with imports": {
		"prefix": "fcomp",
		"body": [
			"import React, { FC } from 'react';",
			"",
			"interface I${1:App}Props {$2",
			"}",
			"",
			"const ${1:}: FC<I${1:}Props> = (props) => {",
			"  return $0;",
			"};",
			"",
			"export default ${1:};",
			""
		],
		"description": "Create a React Stateless Functional Component."
	},
	"React Functional Component without imports": {
		"prefix": "fcompnoimports",
		"body": [
			"interface I${1:App}Props {$2",
			"}",
			"",
			"const ${1:}: FC<I${1:}Props> = (props) => {",
			"  return $0;",
			"};",
			"",
			"export default ${1:};",
			""
		],
		"description": "Create a React Stateless Functional Component (without imports)."
	},
	"constructor": {
		"prefix": "conc",
		"body": [
			"constructor(props) {",
			"  super(props);",
			"  ${1:}",
			"}"
		],
		"description": "Add a constructor in class."
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": [
			"componentWillMount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately before mounting occurs. It is called before render()."
	},
	"render": {
		"prefix": "ren",
		"body": [
			"public render() {",
			"  return (",
			"    ${1:}",
			"  );",
			"}"
		],
		"description": "When called, it should examine this.props and this.state and return a single React element."
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately after a component is mounted."
	},
	"componentWillReceiveProps": {
		"prefix": "cwrp",
		"body": [
			"componentWillReceiveProps(nextProps: ${1:}) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked before a mounted component receives new props."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate(nextProps: ${1:}, nextState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked before rendering when new props or state are being received."
	},
	"componentWillUpdate": {
		"prefix": "cwu",
		"body": [
			"componentWillUpdate(nextProps: ${1:}, nextState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked immediately before rendering when new props or state are being received."
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps: ${1:}, prevState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked immediately after updating occurs. This method is not called for the initial render"
	},
	"componentWillUnmount": {
		"prefix": "cwum",
		"body": [
			"componentWillUnmount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately before a component is unmounted and destroyed"
	},
	"componentSetState": {
		"prefix": "sst",
		"body": [
			"this.setState(${1:});"
		],
		"description": "Performs a shallow merge of nextState into current state"
	},
	"bind method": {
		"prefix": "bnd",
		"body": [
			"this.${1:} = this.${1:}.bind(this);"
		],
		"description": "bind this in method"
	},
	"method": {
		"prefix": "met",
		"body": [
			"${1:methodName} = (${2:e}) => {",
			"  ${3:}",
			"}"
		],
		"description": "Create a method"
	},
	"React redux container": {
		"prefix": "tscntr",
		"body": [
			"import React, { Component } from 'react';",
			"import { connect } from 'react-redux'",
			"",
			"export interface I${1:App}Props {",
			"}",
			"",
			"class ${1:} extends Component<I${1:}Props> {",
			"  public render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    );",
			"  }",
			"}",
			"",
			"const mapStateToProps = state => {",
			"  return {",
			"  };",
			"}",
			"",
			"export default connect(mapStateToProps)(${1:});",
			""
		],
		"description": "React Redux container"
	},
	"import": {
		"prefix": "imp",
		"body": [
			"import { $2 } from '$1';"
		],
		"description": "Create a import"
	},
	"getDerivedStateFromProps": {
		"prefix": "gdsfp",
		"body": [
			"static getDerivedStateFromProps(nextProps: ${1:any}, prevState: ${2:any}) {",
			"  ${0}",
			"}"
		],
		"description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates"
	},
	"getSnapshotBeforeUpdate": {
		"prefix": "gsbu",
		"body": [
			"getSnapshotBeforeUpdate(prevProps: ${1:any}, prevState: ${2:any}) {",
			"  ${0}",
			"}"
		],
		"description": "Invoked right before the most recently rendered output is committed to e.g. the DOM"
	},
	"describe block": {
		"prefix": "dscrb",
		"body": [
			"describe('${1}', () => {",
			"  ${2}",
			"});"
		],
		"description": "Create describe block"
	},
	"describe block with it": {
		"prefix": "dscrbit",
		"body": [
			"describe('${1}', () => {",
			"  it('should ${2}', () => {",
			"    expect(${3}).toEqual(${4});",
			"  });",
			"});"
		],
		"description": "Create describe block with it block"
	},
	"it block": {
		"prefix": "it",
		"body": [
			"it('should ${1}', () => {",
			"  expect(${2}).toEqual(${3});",
			"});",
		],
		"description": "Create describe it block"
	}
}
